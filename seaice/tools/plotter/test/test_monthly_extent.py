import unittest

import numpy as np
import pandas as pd

import seaice.tools.plotter.monthly_extent as plt


class Test_MissingAnchorPoints(unittest.TestCase):

    def test_gets_indices_of_data_adjacent_to_missing_data(self):
        x = np.array([1979.,  1980.,  1981.,  1982.,  1983.,  1984.,  1985.,  1986.,
                      1987.,  1988.,  1989.,  1990.,  1991.,  1992.,  1993.,  1994.,
                      1995.,  1996.,  1997.,  1998.,  1999.,  2000.,  2001.,  2002.,
                      2003.,  2004.,  2005.,  2006.,  2007.,  2008.,  2009.,  2010.,
                      2011.,  2012.,  2013.,  2014.])

        y = np.ma.array([15.46,  15.49,  15.12,  15.57,  15.3,   15.15, 15.34,
                         15.15,  15.33,  15.21,  np.nan, 14.68,  14.93, 14.7,
                         15.18,  14.95,  14.59,  14.22,  14.59,  14.89, 15.13,
                         np.nan, np.nan,  14.37,  14.57,  14.11,  14.07, 13.97,
                         13.87,  14.42,  14.57,  14.7,   14.16,  14.72, 14.36,  14.14])

        df = pd.DataFrame({'data': y, 'year': x}, index=x)

        actual = plt._missing_boundaries(df.data)

        expected = [[9, 11], [20, 23]]

        self.assertEqual(actual, expected)

    def test_with_no_missing_data(self):
        x = np.array([1979.,  1980.,  1981.,  1982.,  1983.,  1984.,  1985.,  1986.,
                      1987.,  1988.,  1989.,  1990.,  1991.,  1992.,  1993.,  1994.,
                      1995.,  1996.,  1997.,  1998.,  1999.,  2000.,  2001.,  2002.,
                      2003.,  2004.,  2005.,  2006.,  2007.,  2008.,  2009.,  2010.,
                      2011.,  2012.,  2013.,  2014.])

        y = np.ma.array([15.46,  15.49,  15.12,  15.57, 15.3,  15.15, 15.34,
                         15.15,  15.33,  15.21,  14.44,  14.68,  14.93, 14.7,
                         15.18,  14.95,  14.59,  14.22,  14.59,  14.89, 15.13,
                         14.63,  14.86,  14.37,  14.57,  14.11,  14.07, 13.97,
                         13.87,  14.42,  14.57,  14.7, 14.16,  14.72, 14.36,  14.14])

        df = pd.DataFrame({'data': y}, index=x)

        actual = plt._missing_boundaries(df.data)
        expected = []

        self.assertEqual(actual, expected)

    def test_with_missing_data_at_end(self):
        x = np.array([1979.,  1980.,  1981.,  1982.,  1983.,  1984.,  1985.,  1986.,
                      1987.,  1988.,  1989.,  1990.,  1991.,  1992.,  1993.,  1994.,
                      1995.,  1996.,  1997.,  1998.,  1999.,  2000.,  2001.,  2002.,
                      2003.,  2004.,  2005.,  2006.,  2007.,  2008.,  2009.,  2010.,
                      2011.,  2012.,  2013.,  2014.])

        y = np.ma.array([15.46,  15.49,  15.12,  15.57,  15.3,   15.15, 15.34,
                         15.15,  15.33,  15.21,  np.nan, 14.68,  14.93, 14.7,
                         15.18,  14.95,  14.59,  14.22,  14.59,  14.89, 15.13,
                         np.nan, np.nan,  14.37,  14.57,  14.11,  14.07, 13.97,
                         13.87,  14.42,  14.57,  14.7,   14.16,  14.72, 14.36,  np.nan])

        self.assertEqual(len(x), len(y))

        df = pd.DataFrame({'data': y, 'year': x}, index=x)

        actual = plt._missing_boundaries(df.data)

        expected = [[9, 11], [20, 23]]

        self.assertEqual(actual, expected)

    def test_with_missing_data_almost_at_end(self):
        x = np.array([1979.,  1980.,  1981.,  1982.,  1983.,  1984.,  1985.,  1986.,
                      1987.,  1988.,  1989.,  1990.,  1991.,  1992.,  1993.,  1994.,
                      1995.,  1996.,  1997.,  1998.,  1999.,  2000.,  2001.,  2002.,
                      2003.,  2004.,  2005.,  2006.,  2007.,  2008.,  2009.,  2010.,
                      2011.,  2012.,  2013.,  2014.])

        y = np.ma.array([15.46,  15.49,  15.12,  15.57,  15.3,   15.15, 15.34,
                         15.15,  15.33,  15.21,  np.nan, 14.68,  14.93, 14.7,
                         15.18,  14.95,  14.59,  14.22,  14.59,  14.89, 15.13,
                         np.nan, np.nan,  14.37,  14.57,  14.11,  14.07, 13.97,
                         13.87,  14.42,  14.57,  14.7,   14.16,  14.72, np.nan, 14.36])

        df = pd.DataFrame({'data': y, 'year': x}, index=x)

        actual = plt._missing_boundaries(df.data)

        expected = [[9, 11], [20, 23], [33, 35]]

        self.assertEqual(actual, expected)

    def test_with_missing_data_at_beginning(self):
        x = np.array([1979.,  1980.,  1981.,  1982.,  1983.,  1984.,  1985.,  1986.,
                      1987.,  1988.,  1989.,  1990.,  1991.,  1992.,  1993.,  1994.,
                      1995.,  1996.,  1997.,  1998.,  1999.,  2000.,  2001.,  2002.,
                      2003.,  2004.,  2005.,  2006.,  2007.,  2008.,  2009.,  2010.,
                      2011.,  2012.,  2013.,  2014.])

        y = np.ma.array([np.nan,  15.49,  15.12,  15.57,  15.3,   15.15, 15.34,
                         15.15,  15.33,  15.21,  np.nan, 14.68,  14.93, 14.7,
                         15.18,  14.95,  14.59,  14.22,  14.59,  14.89, 15.13,
                         np.nan, np.nan,  14.37,  14.57,  14.11,  14.07, 13.97,
                         13.87,  14.42,  14.57,  14.7,   14.16,  14.72, 14.36, 15.46])

        self.assertEqual(len(x), len(y))

        df = pd.DataFrame({'data': y, 'year': x}, index=x)

        actual = plt._missing_boundaries(df.data)

        expected = [[9, 11], [20, 23]]

        self.assertEqual(actual, expected)

    def test_with_missing_data_almost_at_beginning(self):
        x = np.array([1979.,  1980.,  1981.,  1982.,  1983.,  1984.,  1985.,  1986.,
                      1987.,  1988.,  1989.,  1990.,  1991.,  1992.,  1993.,  1994.,
                      1995.,  1996.,  1997.,  1998.,  1999.,  2000.,  2001.,  2002.,
                      2003.,  2004.,  2005.,  2006.,  2007.,  2008.,  2009.,  2010.,
                      2011.,  2012.,  2013.,  2014.])

        y = np.ma.array([15.49, np.nan,  15.12,  15.57,  15.3,   15.15, 15.34,
                         15.15,  15.33,  15.21,  np.nan, 14.68,  14.93, 14.7,
                         15.18,  14.95,  14.59,  14.22,  14.59,  14.89, 15.13,
                         np.nan, np.nan,  14.37,  14.57,  14.11,  14.07, 13.97,
                         13.87,  14.42,  14.57,  14.7,   14.16,  14.72, 14.36, 15.46])

        self.assertEqual(len(x), len(y))

        df = pd.DataFrame({'data': y, 'year': x}, index=x)

        actual = plt._missing_boundaries(df.data)

        expected = [[0, 2], [9, 11], [20, 23]]

        self.assertEqual(actual, expected)
