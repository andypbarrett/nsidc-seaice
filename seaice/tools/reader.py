import calendar
import os
import re

import pandas as pd


REGIONAL_SHEETS = ['Baffin-Area-km^2',
                   'Baffin-Extent-km^2',
                   'Barents-Area-km^2',
                   'Barents-Extent-km^2',
                   'Beaufort-Area-km^2',
                   'Beaufort-Extent-km^2',
                   'Bering-Area-km^2',
                   'Bering-Extent-km^2',
                   'CanadianArchipelago-Area-km^2',
                   'CanadianArchipelago-Extent-km^2',
                   'Central-Arctic-Area-km^2',
                   'Central-Arctic-Extent-km^2',
                   'Chukchi-Area-km^2',
                   'Chukchi-Extent-km^2',
                   'East-Siberian-Area-km^2',
                   'East-Siberian-Extent-km^2',
                   'Greenland-Area-km^2',
                   'Greenland-Extent-km^2',
                   'Hudson-Area-km^2',
                   'Hudson-Extent-km^2',
                   'Kara-Area-km^2',
                   'Kara-Extent-km^2',
                   'Laptev-Area-km^2',
                   'Laptev-Extent-km^2',
                   'Okhotsk-Area-km^2',
                   'Okhotsk-Extent-km^2',
                   'St-Lawrence-Area-km^2',
                   'St-Lawrence-Extent-km^2']


# read a file produced by seaice.tools, and return a DataFrame or dict of
# DataFrames from that file
def read(filename, parse_like=None):
    """
    filename: the file to read

    parse_like: the name of the file generated by seaice.tools, eg
                N_04_extent_v3.0.csv; with this parameter, you can have your own
                "version" of the file, like my_great_N_april_extent_v3.0.csv,
                and pass 'N_04_extent_v3.0.csv' as the second parameter to have
                it parsed
    """

    if parse_like is None:
        parse_like = os.path.basename(filename)

    if re.match('[NS]_seaice_extent_daily_v[0-9\.]*.csv', parse_like):
        df = pd.read_csv(filename)

        # strip column names
        df.columns = [c.strip() for c in df.columns]

        # first line is a label row with values like YYYY and MM and should be
        # ignored
        df = df[1:]

        index = pd.DatetimeIndex(pd.to_datetime(df[['Year', 'Month', 'Day']]))
        df = df.set_index(index)
        df = df.drop(['Year', 'Month', 'Day'], 1)

        df.name = 'Daily Extent CSV'

        return df

    elif re.match('[NS]_(?:0[1-9]|1[012])_extent_v[0-9\.]*.csv', parse_like):
        df = pd.read_csv(filename, na_values=-9999)

        # strip column names
        df.columns = [c.strip() for c in df.columns]

        index = pd.to_datetime(pd.DataFrame({'year': df.year, 'month': df.mo, 'day': 1}))
        df = df.set_index(index)
        df = df.drop(['year', 'mo'], 1)

        df.name = 'Monthly Extent CSV'

        return df

    elif re.match('[NS]_seaice_extent_climatology_1981-2010_v[0-9\.]*.csv', parse_like):
        return pd.read_csv(filename, header=1, index_col=0)

    elif re.match('Sea_Ice_Index_Monthly_Data_with_Statistics_G02135_v[0-9\.]*.xlsx', parse_like):
        dfs = {}

        sheets = []
        sheets += ['{}-NH'.format(month) for month in calendar.month_name[1:]]
        sheets += ['{}-SH'.format(month) for month in calendar.month_name[1:]]

        for sheet in sheets:
            df = pd.read_excel(filename, sheet_name=sheet, header=9, index_col=0)

            # strip column names
            df.columns = [c.strip() for c in df.columns]

            rank_columns = ['ordered-rank', 'ranked-year', 'ranked-extent']
            ranked_df = df[rank_columns]
            df = df.drop(rank_columns + ['reordered =>'], 1)

            index = pd.to_datetime(pd.DataFrame({'year': df.year, 'month': df.month, 'day': 1}))
            df = df.set_index(index)
            df = df.drop(['year', 'month'], 1)

            df.name = 'Monthly Sea Ice Index {}'.format(sheet)
            ranked_df.name = 'Monthly Sea Ice Index {} Ranked'.format(sheet)

            dfs[sheet] = df
            dfs[sheet + ' Ranked'] = ranked_df

        return dfs

    elif re.match('Sea_Ice_Index_Regional_Daily_Data_G02135_v[0-9\.]*.xlsx', parse_like):
        dfs = {}

        xlsx_dfs = pd.read_excel(filename, sheet_name=REGIONAL_SHEETS, header=0, index_col=[0, 1])

        for sheet_name, df in xlsx_dfs.items():
            df = df.stack()
            df = df.reset_index()

            # convert month name to number
            df.month = df.month.apply(calendar.month_name[:].index)

            # get a datetime index
            df['date'] = df.apply(lambda x: pd.Timestamp(year=int(x.level_2),
                                                         month=int(x.month),
                                                         day=int(x.day)), axis='columns')
            df = df.drop(['month', 'day', 'level_2'], 1)
            df = df.set_index('date').sort_index()

            df.columns = [sheet_name]

            dfs[sheet_name] = df

        return dfs

    elif re.match('Sea_Ice_Index_Regional_Monthly_Data_G02135_v[0-9\.]*.xlsx', parse_like):
        return pd.read_excel(filename, sheet_name=REGIONAL_SHEETS, header=[0, 1])

    elif re.match('Sea_Ice_Index_Daily_Extent_G02135_v[0-9\.]*.xlsx', parse_like):
        dfs = {}

        sheets = ['NH-Daily-Extent', 'NH-5-Day-Extent', 'NH-5-Day-Anomaly',
                  'NH-5-Day-Daily-Change', 'SH-Daily-Extent', 'SH-5-Day-Extent',
                  'SH-5-Day-Anomaly', 'SH-5-Day-Daily-Change']
        sheets_with_climatology = ['NH-Daily-Extent', 'NH-5-Day-Extent',
                                   'SH-Daily-Extent', 'SH-5-Day-Extent']

        xlsx_dfs = pd.read_excel(filename, sheet_name=sheets, header=0, index_col=[0, 1])

        for sheet_name, df in xlsx_dfs.items():
            if sheet_name in sheets_with_climatology:
                clima = df['1981-2010']
                df = df.drop('1981-2010', 1)
                df = df.drop(' ', 1)

            df = df.stack()
            df = df.reset_index()

            # convert month name to number
            df.level_0 = df.level_0.apply(calendar.month_name[:].index)

            # Get a datetime index
            df['date'] = df.apply(lambda x: pd.Timestamp(year=int(x.level_2),
                                                         month=int(x.level_0),
                                                         day=int(x.level_1)), axis='columns')
            df = df.drop(['level_0', 'level_1', 'level_2'], 1)
            df = df.set_index('date').sort_index()

            df.columns = [sheet_name]

            dfs[sheet_name] = df

            if sheet_name in sheets_with_climatology:
                dfs[sheet_name + ' climatology'] = clima

        return dfs

    elif re.match('Sea_Ice_Index_Monthly_Data_by_Year_G02135_v[0-9\.]*.xlsx', parse_like):
        dfs = {}

        sheets = ['NH-Extent', 'NH-Area', 'SH-Extent', 'SH-Area']

        xlsx_dfs = pd.read_excel(filename, sheet_name=sheets, header=0, index_col=0)

        for sheet_name, df in xlsx_dfs.items():
            annual_df = df[['Annual']]
            df = df.drop(['Unnamed: 12', 'Annual'], 1)

            df = df.stack()
            df = df.reset_index()

            # convert month name to number
            df.level_1 = df.level_1.apply(calendar.month_name[:].index)

            df['date'] = df.apply(lambda x: pd.Timestamp(year=int(x.level_0),
                                                         month=int(x.level_1),
                                                         day=1), axis='columns')
            df = df.drop(['level_0', 'level_1'], 1)
            df = df.set_index('date').sort_index()

            df.columns = [sheet_name]

            dfs[sheet_name] = df
            dfs[sheet_name + ' Annual'] = annual_df

        return dfs

    elif re.match('Sea_Ice_Index_Rates_of_Change_G02135_v[0-9\.]*.xlsx', parse_like):
        sheets = ['NH-Ice-Change-Mkm^2-per-Month',
                  'NH-Ice-Change-km^2-per-Day',
                  'NH-Ice-Change-mi^2-per-Day',
                  'NH-Ice-Change-mi^2-per-Month',
                  'SH-Ice-Change-Mkm^2-per-Month',
                  'SH-Ice-Change-km^2-per-Day',
                  'SH-Ice-Change-mi^2-per-Day',
                  'SH-Ice-Change-mi^2-per-Month']

        xlsx_dfs = pd.read_excel(filename, sheet_name=sheets, header=1, index_col=0)

        dfs = {}

        for sheet_name, df in xlsx_dfs.items():
            clima = df.loc['1981-2010']

            df = df[:-2]

            df = df.stack()
            df = df.reset_index()

            # convert month name to number
            df.level_1 = df.level_1.apply(calendar.month_name[:].index)

            df['date'] = df.apply(lambda x: pd.Timestamp(year=int(x.level_0),
                                                         month=int(x.level_1),
                                                         day=1), axis='columns')
            df = df.drop(['level_0', 'level_1'], 1)
            df = df.set_index('date').sort_index()

            df.columns = [sheet_name]

            dfs[sheet_name] = df
            dfs[sheet_name + ' climatology'] = clima

        return dfs

    elif re.match('Sea_Ice_Index_Min_Max_Rankings_G02135_v[0-9\.]*.xlsx', parse_like):
        annual_sheets = ['NH-Annual-5-Day-Extent',
                         'NH-Annual-Daily-Extent',
                         'SH-Annual-5-Day-Extent',
                         'SH-Annual-Daily-Extent']
        other_sheets = ['NH-5-Day-Extent-Min',
                        'NH-5-Day-Extent-Max',
                        'NH-Daily-Extent-Min',
                        'NH-Daily-Extent-Max',
                        'SH-5-Day-Extent-Min',
                        'SH-5-Day-Extent-Max',
                        'SH-Daily-Extent-Min',
                        'SH-Daily-Extent-Max']

        dfs = {}

        xlsx_annual = pd.read_excel(filename, sheet_name=annual_sheets, header=0, index_col=0)
        for sheet_name, df in xlsx_annual.items():
            dfs[sheet_name] = df

        xlsx_dfs = pd.read_excel(filename, sheet_name=other_sheets, header=[0, 1], index_col=0)
        for sheet_name, df in xlsx_dfs.items():
            dfs[sheet_name] = df

        return dfs

    else:
        raise Exception('Parser not found for given file: {}.'.format(parse_like))
